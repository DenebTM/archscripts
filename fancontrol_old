#!/usr/bin/python3
import os, os.path, time, sys, traceback

def getTemp():
    # this monitors the wrong sensors sometimes, plsfix
    tfile = open("/sys/class/hwmon/"+sensorname+"/temp1_input", "r")
    cputemp = int(tfile.readline()) / 1000
    tfile.close()
    return cputemp

# Initialization
thresholds = [
    [ -255, 62 ],
    [ 59, 70 ],
    [ 67, 74 ],
    [ 71, 77 ],
    [ 74, 80 ],
    [ 77, 85 ],
    [ 80, 255 ]
]
level = 0
fanOnThreshold = 0

# Determine which sensor to monitor
sensorspath = '/sys/class/hwmon/'
sensors = [name for name in sorted(os.listdir(sensorspath)) if name.startswith('hwmon')]
for n, s in enumerate(sensors):
    file = open(sensorspath+s+'/name', 'r')
    name = file.readline().strip()
    file.close()
    if name == 'coretemp':
        sensorname = s

# Running index
# The fan speed will be set every ten seconds, even if the correct speed hasn't changed.
# This is primarily to deal with level=auto after standby.
run = False

# Start infinite loop
try:
    while (True):
        cputemp = getTemp()

        # Determine the correct fan level
        isCorrectLevel = False
        newLevel = level
        while not isCorrectLevel:
            isCorrectLevel = True
            # Decrease the fan speed if temp is low enough
            if getTemp() < thresholds[newLevel][0]:
                newLevel -= 1
                isCorrectLevel = False
            # Increase the fan speed if temp is too high
            elif getTemp() > thresholds[newLevel][1]:
                newLevel += 1
                isCorrectLevel = False

            # Prevent over- or underflow
            if newLevel < 0 or newLevel > 6:
                isCorrectLevel = True
                if newLevel < 0:
                    newLevel = 0
                elif newLevel > 6:
                    newLevel = 6

        # Be initially reluctant to increase the fan speed beyond level 1
        if 1 < newLevel < 4 and level <= 1 and fanOnThreshold < 15:
            # Give indication that the clock is ticking
            if 0 < fanOnThreshold < 15:
                print("Inhibiting level " + str(newLevel) + ", waiting " + str(15 - fanOnThreshold) + " more seconds.")

            # Set the correct fan speed on first run, though
            if run is False:
                fanOnThreshold = 15
            else:
                newLevel = 1
                fanOnThreshold += 1
        # Reset the counter to 0 if the level is low or high enough
        elif newLevel <= 1 or newLevel >= 4:
            if 0 < fanOnThreshold < 15:
                print('Stopped waiting.')
            fanOnThreshold = 0

        # If the level has changed (or the running index is 0), set it and notify the user
        if newLevel != level or run == 0:
            os.system("setfan " + str(newLevel) + " > /dev/null")
            if newLevel != level or run is False:
                if run is False: print('init:',end=' ')
                elif newLevel != level: print(str(level)+'->'+str(newLevel)+':',end=' ')
                print("Fan set to level " + str(newLevel) + ".")
            level = newLevel

        # Increment and reset running index
        run = (run + 1) % 10

        # Sleb
        time.sleep(1)
except KeyboardInterrupt:
    sys.exit(0)
except Exception:
    traceback.print_exc(file=sys.stdout)
